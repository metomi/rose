[complex:array_test=control_array_all_ne]
length=:
type=integer

[complex:array_test=control_array_any_lt]
length=:
type=integer

[complex:array_test=control_var_1]
description=If 'N', fail the check
values='Y', 'N'

[complex:array_test=control_var_2]
description=If 'Y', fail the check
values='Y', 'N'

[complex:array_test=control_var_3]
description=If element 2 is not N, fail the check
length=:
values=Y, N

[complex:array_test=test_array_fail]
description=Check for failure if element 2 is not '0A' and element 4 is '0A'
fail-if=this(2) != "'0A'" and this(4) == "'0A'" and (complex:array_test=control_var_1 != "'N'" or complex:array_test=control_var_2 != "'Y'" or all(complex:array_test=control_var_3 == 'N'))
length=:

[complex:array_test=test_array_pass]
description=Check for failure if element 2 is not '0A' and element 4 is '0A'
fail-if=this(2) != "'0A'" and this(4) == "'0A'" and (complex:array_test=control_var_1 != "'N'" or complex:array_test=control_var_2 != "'Y'" or complex:array_test=control_var_3(2) == 'N')
length=:

[complex:array_test=test_var_all_ne_fail]
description=Fail if all elements in the control_array_all_ne are not equal to this value
fail-if=all(complex:array_test=control_array_all_ne != this)
length=:

[complex:array_test=test_var_all_ne_pass]
description=Fail if all elements in the control_array_all_ne are not equal to this value
fail-if=all(complex:array_test=control_array_all_ne != this)
length=:

[complex:array_test=test_var_any_lt_fail]
description=Fail if any elements in the control_array_any_lt are less than this value
fail-if=any(complex:array_test=control_array_any_lt < this)
length=:

[complex:array_test=test_var_any_lt_pass]
description=Fail if any elements in the control_array_any_lt are less than this value
fail-if=any(complex:array_test=control_array_any_lt < this)
length=:

[complex:scalar_test=control_arith1]
type=integer

[complex:scalar_test=control_arith2]
type=real

[complex:scalar_test=test_var_arith_fail]
fail-if=this != 1 + complex:scalar_test=control_arith1 * (complex:scalar_test=control_arith2 - this )
type=real

[complex:scalar_test=test_var_arith_pass]
fail-if=this != 1 + complex:scalar_test=control_arith1 * (complex:scalar_test=control_arith2 - this )
type=real

[complex:scalar_test=test_var_multi_odd_positive_fail]
description=Not allowed to be positive or odd
fail-if=this > 0; this % 2 == 1
type=real

[complex:scalar_test=test_var_multi_odd_positive_pass]
description=Not allowed to be positive or odd
fail-if=this > 0; this % 2 == 1
type=real

[simple:array_test=test_array_all_fail]
description=Fail if all elements are zero
fail-if=all(this == 0)
length=:

[simple:array_test=test_array_all_pass]
description=Fail if all elements are zero
fail-if=all(this == 0)
length=:

[simple:array_test=test_array_any_fail]
description=Fail if any elements are zero
fail-if=any(this == 0)
length=:

[simple:array_test=test_array_any_pass]
description=Fail if any elements are zero
fail-if=any(this == 0)
length=:

[simple:array_test=test_array_fail]
description=Fail if element 2 is not '0A' and element 4 is '0A'
fail-if=this(2) != "'0A'" and this(4) == "'0A'"
length=:

[simple:array_test=test_array_pass]
description=Fail if element 2 is not '0A' and element 4 is '0A'
fail-if=this(2) != "'0A'" and this(4) == "'0A'"
length=:

[simple:scalar_test=control_less_than]
type=integer

[simple:scalar_test=test_var_even_fail]
fail-if=this % 2 == 0  # Oh no! Even
type=integer

[simple:scalar_test=test_var_even_pass]
fail-if=this % 2 == 0
type=integer

[simple:scalar_test=test_var_lt_control_fail]
fail-if=this < simple:scalar_test=control_lt  # Oh no! Less than control_lt
type=integer

[simple:scalar_test=test_var_lt_control_pass]
fail-if=this < simple:scalar_test=control_lt
type=integer

[simple:scalar_test=test_var_mult_fail]
fail-if=this != simple:scalar_test=control_mult_1 * simple:scalar_test=control_mult_2
type=real

[simple:scalar_test=test_var_mult_pass]
fail-if=this != simple:scalar_test=control_mult_1 * simple:scalar_test=control_mult_2
type=real

[simple:scalar_test=test_var_sum_fail]
fail-if=this != simple:scalar_test=control_sum_1 + simple:scalar_test=control_sum_2 + simple:scalar_test=control_sum_3
type=real

[simple:scalar_test=test_var_sum_pass]
fail-if=this != simple:scalar_test=control_sum_1 + simple:scalar_test=control_sum_2 + simple:scalar_test=control_sum_3
type=real

[simple:warn=test_var_deprec_fail]
type=logical
warn-if=True  # Deprecated.

[simple:warn=test_var_fail]
type=integer
warn-if=this % 1 == 1

[simple:warn=test_var_pass]
type=integer
warn-if=this % 1 == 1
