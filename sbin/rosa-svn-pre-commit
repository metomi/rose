#!/usr/bin/env python
#-------------------------------------------------------------------------------
# (C) British Crown Copyright 2012 Met Office.
# 
# This file is part of Rose, a framework for scientific suites.
# 
# Rose is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Rose is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Rose. If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# NAME
#     rosa svn-pre-commit
#
# SYNOPSIS
#     rosa svn-pre-commit REPOS TXN
#
# DESCRIPTION
#     Ensure that an SVN commit conforms to the rules of Rosie.
#-------------------------------------------------------------------------------

import os
import re
import rose.config
import shlex
import subprocess
import sys
import tempfile


RE_ID_NAMES = [r"[a-z]", r"[a-z]", r"\d", r"\d", r"\d"]
LEN_ID = len(RE_ID_NAMES)
TRUNK_INFO_FILE = "trunk/rose-suite.info"
TRUNK_KNOWN_KEYS_FILE = "trunk/rosie-keys"
ST_ADD = "A"
ST_DELETE = "D"
ST_UPDATE = "U"


def get_access_info(repos, path_head, txn=None):
    """Return the owner and the access list of a suite (path_head)."""
    opt_txn = []
    if txn is not None:
        opt_txn = ["-t", txn]
    f = tempfile.TemporaryFile()
    f.write(svnlook("cat", repos, path_head + TRUNK_INFO_FILE, *opt_txn))
    f.seek(0)
    config = rose.config.load(f)
    f.close()
    node = config.get(["owner"])
    owner = None
    if node:
        owner = node.value
    node = config.get(["access-list"])
    access_list = []
    if node:
        access_list = node.value.split()
    access_list.sort()
    return owner, access_list


def svnlook(*args):
    """Return the standard output from "svnlook"."""
    p = subprocess.Popen(["svnlook"] + list(args), stdout=subprocess.PIPE)
    (out, err) = p.communicate()
    rc = p.wait()
    if rc:
        sys.exit("[FAIL] %s # rc=%d" % (" ".join(["svnlook"] + list(args)), rc))
    return out


def main(repos, txn):
    changes = set() # set([(status, path), ...])
    for line in svnlook("changed", "-t", txn, repos).splitlines():
        status, path = line.split(None, 1)
        changes.add((status, path))
    bad_changes = set()
    author = None
    super_users = None
    access_info_map = {} # {path-id: (owner, access-list), ...}
    txn_access_info_map = {}
    for status, path in sorted(changes):
        names = path.split("/", LEN_ID + 1)
        if not names[-1]:
            names.pop()

        # Directories above the suites must match the ID patterns
        is_bad = False
        for name, pattern in zip(names, RE_ID_NAMES):
            if not re.compile(r"\A" + pattern + r"\Z").match(name):
                is_bad = True
                break
        
        if is_bad and any([n != l for n, l in zip(names, "ROSIE")]):
            bad_changes.add((status, path))
            continue

        # Can only add directories at levels above the suites
        if len(names) < LEN_ID:
            if status[0] != ST_ADD:
                bad_changes.add((status, path))
            continue

        # No need to check non-trunk changes
        if len(names) > LEN_ID and names[LEN_ID] != "trunk":
            continue

        # New suite should have an info file
        if status[0] == ST_ADD and len(names) == LEN_ID:
            if (ST_ADD, path + "trunk/") not in changes:
                bad_changes.add((status, path))
            if (ST_ADD, path + TRUNK_INFO_FILE) not in changes:
                bad_changes.add((status, path))
            continue

        # The rest are trunk changes in a suite
        path_head = "/".join(names[0:LEN_ID]) + "/"
        path_tail = path[len(path_head):]
        
        if ("".join(names[0:LEN_ID]) == "ROSIE" and
            path_tail == TRUNK_KNOWN_KEYS_FILE):
            keys = svnlook("cat", "-t", txn, repos, path)
            try:
                keys = " ".join(shlex.split(keys))
            except ValueError:
                bad_changes.add((status, path))
                continue

        # New suite trunk information file must have an owner
        if status == ST_ADD and path_tail == TRUNK_INFO_FILE:
            owner, access_list = get_access_info(repos, path_head, txn)
            if not owner:
                bad_changes.add((status, path))
            continue

        # New suite trunk: ignore
        if status == ST_ADD:
            continue

        # Can only remove trunk information file with suite
        if status == ST_DELETE and path_tail == TRUNK_INFO_FILE:
            if (ST_DELETE, path_head) not in changes:
                bad_changes.add((status, path))
            continue

        # Can only remove trunk with suite
        if status == ST_DELETE and path_tail == "trunk/":
            if (ST_DELETE, path_head) not in changes:
                bad_changes.add((status, path))
            continue

        # See whether author has permission to make changes
        if author is None:
            author = svnlook("author", "-t", txn, repos).strip()
        if super_users is None:
            super_users_file = os.path.join(os.getenv("HERE", "."),
                                            "rosa-svn-pre-commit-super-users")
            super_users = []
            if os.access(super_users_file, os.F_OK | os.R_OK):
                try:
                    super_users = open(super_users_file).read().split()
                except:
                    pass
        if not access_info_map.has_key(path_head):
            access_info_map[path_head] = get_access_info(repos, path_head)
        owner, access_list = access_info_map[path_head]
        admin_users = super_users + [owner]

        # Only admin users can remove the suite
        if author not in admin_users and not path_tail:
            bad_changes.add((status, path))
            continue

        # Admin users and those in access list can modify everything in trunk
        # apart from specific entries in the trunk info file
        if "*" in access_list or author in admin_users + access_list:
            if path_tail != TRUNK_INFO_FILE:
                continue
        else:
            bad_changes.add((status, path))

        # The owner must not be deleted
        if not txn_access_info_map.has_key(path_head):
            txn_access_info_map[path_head] = get_access_info(repos, path_head, txn)
        txn_owner, txn_access_list = txn_access_info_map[path_head]
        if not txn_owner:
            bad_changes.add((status, path))
            continue

        # Only the admin users can change owner and access list
        if author in admin_users:
            continue
        if owner != txn_owner or access_list != txn_access_list:
            bad_changes.add((status, path))
            continue

    if bad_changes:
        bad_change_string = ""
        for status, path in sorted(bad_changes):
            bad_change_string += "[PERMISSION DENIED] %-4s%s\n" % (status, path)
        sys.exit(bad_change_string)


if __name__ == "__main__":
    repos, txn = sys.argv[1:3]
    main(repos, txn)
